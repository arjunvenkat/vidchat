<h1></h1>
<p id="notice"><%= notice %></p>
<% content_for :head do %>
  <script src="http://staging.tokbox.com/v0.91/js/TB.min.js" type="text/javascript" charset="utf-8"></script>
<% end %>


<script type="text/javascript" charset="utf-8">
  var apiKey = <%= @API_KEY %>;
  var sessionId = "<%= @section.session_id %>";
  var token = "<%= session[:token] %>";


  var session;
  var publisher;
  var subscribers ={}
  var VIDEO_WIDTH = 160;
  var VIDEO_HEIGHT = 120;

  TB.setLogLevel(TB.DEBUG);
  TB.addEventListener(TB.EXCEPTION, exceptionHandler);

  function exceptionHandler(event) {
    if (event.code == 1013) {
      document.body.innerHTML = "This page is trying to connect a third client to an OpenTok peer-to-peer session. "
        + "Only two clients can connect to peer-to-peer sessions.";
    } else {
      alert("Exception: " + event.code + "::" + event.message);
    }
  }

  if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
      alert("You don't have the minimum requirements to run this application."
          + "Please upgrade to the latest version of Flash.");
    } else {
      session = TB.initSession(sessionId);  // Initialize session

      // Add event listeners to the session
      session.addEventListener('sessionConnected', sessionConnectedHandler);
      session.addEventListener('sessionDisconnected', sessionDisconnectedHandler);
      session.addEventListener('connectionCreated', connectionCreatedHandler);
      session.addEventListener('connectionDestroyed', connectionDestroyedHandler);
      session.addEventListener('streamCreated', streamCreatedHandler);
      session.addEventListener('streamDestroyed', streamDestroyedHandler);
    }



    function connect() {
      session.connect(apiKey, token);
      hide('connectLink')
      show('disconnectLink')
      // show('publishLink')

    }

    function disconnect() {
      session.disconnect();
      hide('disconnectLink');
      hide('publishLink');
      hide('unpublishLink');
    }

    function startPublishing() {
      if (!publisher) {
        var parentDiv = document.getElementById("myCamera");
        var publisherDiv = document.createElement('div'); // Create a div for the publisher to replace
        publisherDiv.setAttribute('id', 'opentok_publisher');
        parentDiv.appendChild(publisherDiv);
        var publisherProps = {width: 38, height: 38};
        publisher = TB.initPublisher(apiKey, publisherDiv.id, publisherProps);  // Pass the replacement div id and properties
        session.publish(publisher);

        show('unpublishLink');
        hide('publishLink');
      }
    }

    function stopPublishing() {
      if (publisher) {
        session.unpublish(publisher);
      }
      publisher = null;

      show('publishLink');
      hide('unpublishLink');
    }

    function makeLarge() {
      session.unpublish(publisher);
      var parentDiv = document.getElementById("myCamera");
      var publisherDiv = document.createElement('div');
      publisherDiv.setAttribute('id', 'opentok_publisher');
      parentDiv.appendChild(publisherDiv);
      var publisherProps = {width: 640, height: 480};
      publisher = TB.initPublisher(apiKey, publisherDiv.id, publisherProps);
      session.publish(publisher);

    }

    function makeSmall() {
      session.unpublish(publisher);
      var parentDiv = document.getElementById("myCamera");
      var publisherDiv = document.createElement('div');
      publisherDiv.setAttribute('id', 'opentok_publisher');
      parentDiv.appendChild(publisherDiv);
      var publisherProps = {width: 160, height: 120};
      publisher = TB.initPublisher(apiKey, publisherDiv.id, publisherProps);
      session.publish(publisher);


    }

    function makeRegular() {
      session.unpublish(publisher);
      var parentDiv = document.getElementById("myCamera");
      var publisherDiv = document.createElement('div');
      publisherDiv.setAttribute('id', 'opentok_publisher');
      parentDiv.appendChild(publisherDiv);
      var publisherProps = {width: 320, height: 240};
      publisher = TB.initPublisher(apiKey, publisherDiv.id, publisherProps);
      session.publish(publisher);
    }



    function sessionConnectedHandler(event) {
      // Subscribe to all streams currently in the Session
      console.log(event)
      for (var i = 0; i < event.streams.length; i++) {
        addStream(event.streams[i]);
      }
      show('disconnectLink');
      show('publishLink');
      hide('connectLink');
    }

    function streamCreatedHandler(event) {
      // Subscribe to the newly created streams
      for (var i = 0; i < event.streams.length; i++) {
        addStream(event.streams[i]);
      }
    }

    function streamDestroyedHandler(event) {
      // This signals that a stream was destroyed. Any Subscribers will automatically be removed.
      // This default behaviour can be prevented using event.preventDefault()
    }

    function sessionDisconnectedHandler(event) {
      // This signals that the user was disconnected from the Session. Any subscribers and publishers
      // will automatically be removed. This default behaviour can be prevented using event.preventDefault()
      publisher = null;

      show('connectLink');
      hide('disconnectLink');
      hide('publishLink');
      hide('unpublishLink');
    }

    function connectionDestroyedHandler(event) {
      // This signals that connections were destroyed
    }

    function connectionCreatedHandler(event) {
      // This signals new connections have been created.
    }




    function addStream(stream) {
      // Check if this is the stream that I am publishing, and if so do not publish.
      // if (stream.connection.connectionId == session.connection.connectionId) {
      //   return;
      // }
      var subscriberDiv = document.createElement('div'); // Create a div for the subscriber to replace
      subscriberDiv.setAttribute('id', stream.streamId); // Give the replacement div the id of the stream as its id.
      var data = stream.connection.data;
        if (stream.connection.data == "teacher"){
          var subscriberProps = {width: 960, height: 600};
          document.getElementById("teacher").appendChild(subscriberDiv);
        }
        else {
          document.getElementById("students").appendChild(subscriberDiv);
          var subscriberProps = {width: VIDEO_WIDTH, height: VIDEO_HEIGHT};
        }
      subscribers[stream.streamId] = session.subscribe(stream, subscriberDiv.id, subscriberProps);
    }

    function show(id) {
      document.getElementById(id).style.display = 'inline';
    }

    function hide(id) {
      document.getElementById(id).style.display = 'none';
    }

</script>

<!-- role: <%= @role %> 
<p>
  <b>User:</b>
  <%= @section.user_id %>
</p>

<p>
  <b>Session:</b>
  <%= @section.session_id %>
</p> -->
<h1 class="title"> Intro to Cantonese
</h1>


<p class="token">
  <% if session[:token].present? %>
    <!-- <b>Token:</b> <%= session[:token] %> -->
    <%= link_to "Reset section", "/sections/#{@section.id}/get_token" %>
  <% else %>
    <%= link_to "Reset section", "/sections/#{@section.id}/get_token" %>
  <% end %> 
</p>

<div ="links">
      <ul class="link_list">
        <li><input type="button" value="Enter Class" id ="connectLink" onClick="javascript:connect()" class="btn_blue"/></li> 
        <li><input type="button" value="Leave Class" id ="disconnectLink" onClick="javascript:disconnect()" class="btn_blue" /></li>
        <li><input type="button" value="Start Your Video" id ="publishLink" onClick="javascript:startPublishing()" class="btn_grn" /></li>
        <li><input type="button" value="Stop Your Video" id ="unpublishLink" onClick="javascript:stopPublishing()" class="btn_blue" /></li>
        <li id="myCamera"></li>
      </ul>

</div>

<div class="teacher"></div>
<div class="students"></div>



<script type="text/javascript" charset="utf-8">
    show('connectLink');
    hide('disconnectLink')
    hide('publishLink')
    hide('unpublishLink')
</script>



<%= link_to 'Edit', edit_section_path(@section) %> |
<%= link_to 'Back', sections_path %>
